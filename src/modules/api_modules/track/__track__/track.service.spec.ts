// Generated by CodiumAI

import { TrackService } from '../track.service';
import { HttpStatus, NotFoundException } from '@nestjs/common';

describe('TrackService', () => {
  // Tests that getTrackBySlug returns a ResponseFormat object with statusCode 200 and track data when a valid slug is provided and track is found in the database.
  it('should return a ResponseFormat object with statusCode 200 and track data when a valid slug is provided and track is found in the database', async () => {
    // Mock dependencies
    const trackRepoMock = {
      findOneByUniqueId: jest.fn().mockResolvedValue({
        uniqueId: 'valid-slug',
        title: 'Track Title',
        performer: 'Track Performer',
        duration: 180,
        thumbnail: 'track-thumbnail.jpg',
      }),
    } as any;
    const trackService = new TrackService(trackRepoMock);

    // Call the method
    const result = await trackService.getTrackBySlug('valid-slug');

    // Assertions
    expect(result.statusCode).toBe(HttpStatus.OK);
    expect(result.data.uniqueId).toBe('valid-slug');
    expect(result.data.title).toBe('Track Title');
    expect(result.data.performer).toBe('Track Performer');
    expect(result.data.duration).toBe(180);
    expect(result.data.isHaveThumbnail).toBe(true);
  });

  // Tests that getTrackBySlug throws a NotFoundException when an invalid slug is provided.
  it('should throw a NotFoundException when an invalid slug is provided', async () => {
    // Mock dependencies
    const trackRepoMock = {
      findOneByUniqueId: jest.fn().mockResolvedValue(null),
    } as any;
    const trackService = new TrackService(trackRepoMock);

    // Assertions
    await expect(trackService.getTrackBySlug('invalid-slug')).rejects.toThrow(
      NotFoundException,
    );
  });

  // Tests that getTrackBySlug returns a ResponseFormat object with isHaveThumbnail true when track has a thumbnail.
  it('should return a ResponseFormat object with isHaveThumbnail true when track has a thumbnail', async () => {
    // Mock dependencies
    const trackRepoMock = {
      findOneByUniqueId: jest.fn().mockResolvedValue({
        uniqueId: 'valid-slug',
        title: 'Track Title',
        performer: 'Track Performer',
        duration: 180,
        thumbnail: 'track-thumbnail.jpg',
      }),
    } as any;
    const trackService = new TrackService(trackRepoMock);

    // Call the method
    const result = await trackService.getTrackBySlug('valid-slug');

    // Assertions
    expect(result.data.isHaveThumbnail).toBe(true);
  });
});
