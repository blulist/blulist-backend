// Generated by CodiumAI

import { PlaylistsService } from '../playlists.service';
import { HttpStatus, NotFoundException } from '@nestjs/common';

describe('PlaylistsService', () => {
  // Tests that getPlaylist method retrieves a playlist by slug and returns the response format with playlist details
  it('should retrieve a playlist by slug and return the response format with playlist details', async () => {
    // Mock dependencies
    const playlistRepoMock = {
      findOneBySlug: jest.fn().mockResolvedValue({
        slug: 'test-slug',
        name: 'Test Playlist',
        bannerId: 'test-banner-id',
        viewCount: 100,
        createdAt: new Date(),
        _count: {
          Track: 10,
          Like: 5,
        },
      }),
    };
    const trackRepoMock = {};

    // Create instance of PlaylistsService with mocked dependencies
    const playlistsService = new PlaylistsService(
      playlistRepoMock as any,
      trackRepoMock as any,
    );

    // Call the getPlaylist method
    const result = await playlistsService.getPlaylist('test-slug');

    // Assert the result
    expect(result.statusCode).toBe(HttpStatus.OK);
    expect(result.data.slug).toBe('test-slug');
    expect(result.data.name).toBe('Test Playlist');
    expect(result.data.isHaveBanner).toBe(true);
    expect(result.data.viewCount).toBe(100);
    expect(result.data.createdAt).toBeInstanceOf(Date);
    expect(result.data.tracksCount).toBe(10);
    expect(result.data.likesCount).toBe(5);
  });

  // Tests that getAllPublicPlaylists method retrieves all public playlists and returns the response format with playlists details
  it('should retrieve all public playlists and return the response format with playlists details', async () => {
    // Mock dependencies
    const playlistRepoMock = {
      findAll: jest.fn().mockResolvedValue([
        {
          slug: 'test-slug-1',
          name: 'Test Playlist 1',
          bannerId: 'test-banner-id-1',
          viewCount: 100,
          createdAt: new Date(),
          _count: {
            Track: 10,
            Like: 5,
          },
        },
        {
          slug: 'test-slug-2',
          name: 'Test Playlist 2',
          bannerId: null,
          viewCount: 50,
          createdAt: new Date(),
          _count: {
            Track: 5,
            Like: 2,
          },
        },
      ]),
    };
    const trackRepoMock = {};

    // Create instance of PlaylistsService with mocked dependencies
    const playlistsService = new PlaylistsService(
      playlistRepoMock as any,
      trackRepoMock as any,
    );

    // Call the getAllPublicPlaylists method
    const result = await playlistsService.getAllPublicPlaylists(1, 10);

    // Assert the result
    expect(result.statusCode).toBe(HttpStatus.OK);
    expect(result.data).toHaveLength(2);
    expect(result.data[0].slug).toBe('test-slug-1');
    expect(result.data[0].name).toBe('Test Playlist 1');
    expect(result.data[0].isHaveBanner).toBe(true);
    expect(result.data[0].viewCount).toBe(100);
    expect(result.data[0].createdAt).toBeInstanceOf(Date);
    expect(result.data[0].tracksCount).toBe(10);
    expect(result.data[0].likesCount).toBe(5);
    expect(result.data[1].slug).toBe('test-slug-2');
    expect(result.data[1].name).toBe('Test Playlist 2');
    expect(result.data[1].isHaveBanner).toBe(false);
    expect(result.data[1].viewCount).toBe(50);
    expect(result.data[1].createdAt).toBeInstanceOf(Date);
    expect(result.data[1].tracksCount).toBe(5);
    expect(result.data[1].likesCount).toBe(2);
  });

  // Tests that getPlaylistTracks method retrieves tracks of a playlist by slug and returns the response format with tracks details
  it('should retrieve tracks of a playlist by slug and return the response format with tracks details', async () => {
    // Mock dependencies
    const playlistRepoMock = {
      findOneBySlug: jest.fn().mockResolvedValue({
        id: 1,
        slug: 'test-slug',
        name: 'Test Playlist',
        bannerId: 'test-banner-id',
        viewCount: 100,
        createdAt: new Date(),
        _count: {
          Track: 10,
          Like: 5,
        },
      }),
    };
    const trackRepoMock = {
      findTracksByPlaylistId: jest.fn().mockResolvedValue([
        {
          uniqueId: 'test-unique-id-1',
          title: 'Test Track 1',
          performer: 'Test Performer 1',
          duration: 180,
          thumbnail: 'test-thumbnail-1',
        },
        {
          uniqueId: 'test-unique-id-2',
          title: 'Test Track 2',
          performer: 'Test Performer 2',
          duration: 240,
          thumbnail: null,
        },
      ]),
    };

    // Create instance of PlaylistsService with mocked dependencies
    const playlistsService = new PlaylistsService(
      playlistRepoMock as any,
      trackRepoMock as any,
    );

    // Call the getPlaylistTracks method
    const result = await playlistsService.getPlaylistTracks('test-slug', 1, 10);

    // Assert the result
    expect(result.statusCode).toBe(HttpStatus.OK);
    expect(result.data).toHaveLength(2);
    expect(result.data[0].uniqueId).toBe('test-unique-id-1');
    expect(result.data[0].title).toBe('Test Track 1');
    expect(result.data[0].performer).toBe('Test Performer 1');
    expect(result.data[0].duration).toBe(180);
    expect(result.data[0].isHaveThumbnail).toBe(true);
    expect(result.data[1].uniqueId).toBe('test-unique-id-2');
    expect(result.data[1].title).toBe('Test Track 2');
    expect(result.data[1].performer).toBe('Test Performer 2');
    expect(result.data[1].duration).toBe(240);
    expect(result.data[1].isHaveThumbnail).toBe(false);
  });

  // Tests that getPlaylist method throws a NotFoundException when the playlist is not found by slug
  it('should throw a NotFoundException when the playlist is not found by slug', async () => {
    // Mock dependencies
    const playlistRepoMock = {
      findOneBySlug: jest.fn().mockResolvedValue(null),
    };
    const trackRepoMock = {};

    // Create instance of PlaylistsService with mocked dependencies
    const playlistsService = new PlaylistsService(
      playlistRepoMock as any,
      trackRepoMock as any,
    );

    // Call the getPlaylist method and expect it to throw a NotFoundException
    await expect(
      playlistsService.getPlaylist('test-slug'),
    ).rejects.toThrowError(NotFoundException);
  });

  // Tests that getAllPublicPlaylists method returns an empty array when no public playlists are found
  it('should return an empty array when no public playlists are found', async () => {
    // Mock dependencies
    const playlistRepoMock = {
      findAll: jest.fn().mockResolvedValue([]),
    };
    const trackRepoMock = {};

    // Create instance of PlaylistsService with mocked dependencies
    const playlistsService = new PlaylistsService(
      playlistRepoMock as any,
      trackRepoMock as any,
    );

    // Call the getAllPublicPlaylists method
    const result = await playlistsService.getAllPublicPlaylists(1, 10);

    // Assert the result
    expect(result.statusCode).toBe(HttpStatus.OK);
    expect(result.data).toHaveLength(0);
  });
});
